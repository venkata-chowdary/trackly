// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  clerkUserId     String           @unique
  email           String           @unique
  name            String?
  imageUrl        String?
  credits         Int              @default(30)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  applicationRefs Application[]
  UserPreferences UserPreferences?
  mailRefs        MailIdLog[]
  PaymentLog      PaymentLog[]
}

model Application {
  id        String    @id @default(cuid())
  userRefId String
  userRef   User      @relation(fields: [userRefId], references: [id])
  jobTitle  String
  company   String
  jobId     String?
  platform  String
  location  String?
  status    String[]
  notes     String?
  jobType   String
  appliedAt DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  mailRefId String
  mailRef   MailIdLog @relation(fields: [mailRefId], references: [mailId])
}

model UserPreferences {
  id        String @id @default(cuid())
  userRefId String @unique
  userRef   User   @relation(fields: [userRefId], references: [id])

  syncFrequency         Int     @default(6)
  emailNotifications    Boolean @default(true)
  whatsAppNotifications Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MailIdLog {
  id       String     @id @default(cuid())
  mailId   String     @unique
  threadId String
  status   MailStatus @default(pending)

  userRefId       String
  userRef         User          @relation(fields: [userRefId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  applicationRefs Application[]

  @@index([status])
}

enum MailStatus {
  pending
  processing
  completed
  error
  unable_to_analyze
  non_job
}

model PaymentLog {
  id                 String        @id @default(cuid())
  userRefId          String
  userRef            User          @relation(fields: [userRefId], references: [id])
  amount             Int
  buyer_email        String
  buyer_name         String
  buyer_phone_number String?
  currency           String
  fees               Int
  longurl            String
  mac                String
  payment_id         String
  payment_request_id String
  purpose            String?
  shorturl           String
  status             PaymentStatus // Status of the Payment. This can be either "Credit" or "Failed".	Credit

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PaymentStatus {
  Credit
  Failed
}
